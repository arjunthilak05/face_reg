import cv2
import numpy as np
import os
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.models import Model

# Constants
IMG_SIZE = (224, 224)  # MobileNetV2 input size
CASCADE_PATH = '/content/lbpcascade_frontalface_improved.xml'

def create_model(num_classes):
    base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
    x = base_model.output
    x = GlobalAveragePooling2D()(x)
    x = Dense(1024, activation='relu')(x)
    predictions = Dense(num_classes, activation='softmax')(x)
    model = Model(inputs=base_model.input, outputs=predictions)
    return model

def imgs_and_labels(data_dir):
    images = []
    labels = []
    label_dict = {}
    label_id = 0

    # Load the face cascade
    if not os.path.exists(CASCADE_PATH):
        print(f"Error: Cascade file not found at {CASCADE_PATH}")
        return np.array([]), np.array([]), {}

    face_cascade = cv2.CascadeClassifier(CASCADE_PATH)
    if face_cascade.empty():
        print("Error: Failed to load face cascade classifier")
        return np.array([]), np.array([]), {}

    for person_dir in os.listdir(data_dir):
        person_path = os.path.join(data_dir, person_dir)
        if os.path.isdir(person_path):
            label_dict[label_id] = person_dir
            for image_name in os.listdir(person_path):
                image_path = os.path.join(person_path, image_name)
                img = cv2.imread(image_path)
                if img is None:
                    print(f"Warning: Could not read image {image_path}")
                    continue
                gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

                faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

                for (x, y, w, h) in faces:
                    face = img[y:y+h, x:x+w]
                    face = cv2.resize(face, IMG_SIZE)
                    face = cv2.cvtColor(face, cv2.COLOR_BGR2RGB)
                    images.append(face)
                    labels.append(label_id)

            label_id += 1

    return np.array(images), np.array(labels), label_dict

# Provide the path to your data directory
data_path = 'data_with_masks'  # Update this path to your data directory with masked images

print("Loading and processing images...")
images, labels, label_dict = imgs_and_labels(data_path)

if len(images) == 0:
    print("Error: No faces detected in the training images. Please check your image data and cascade file.")
    exit(1)

# Create and train the model
num_classes = len(np.unique(labels))
model = create_model(num_classes)
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

print("Training model...")
model.fit(images, labels, epochs=20, validation_split=0.2)

# Save the trained model and labels
model.save('masked_face_recognizer.h5')
np.save('masked_face_labels.npy', label_dict)
print("Model trained and saved successfully!")
